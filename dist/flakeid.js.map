{"version":3,"file":"flakeid.js","sources":["../src/hex2dec.js","../src/flakeid.js"],"sourcesContent":["/**\r\n * A function for converting hex <-> dec w/o loss of precision.\r\n * By Dan Vanderkam http://www.danvk.org/hex2dec.html\r\n */\r\n\r\n// Adds two arrays for the given base (10 or 16), returning the result.\r\n// This turns out to be the only \"primitive\" operation we need.\r\nfunction add(x, y, base) {\r\n  var z = [];\r\n  var n = Math.max(x.length, y.length);\r\n  var carry = 0;\r\n  var i = 0;\r\n  while (i < n || carry) {\r\n    var xi = i < x.length ? x[i] : 0;\r\n    var yi = i < y.length ? y[i] : 0;\r\n    var zi = carry + xi + yi;\r\n    z.push(zi % base);\r\n    carry = Math.floor(zi / base);\r\n    i++;\r\n  }\r\n  return z;\r\n}\r\n\r\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\r\n// JavaScript number. base is the number base of the array x.\r\nfunction multiplyByNumber(num, x, base) {\r\n  if (num < 0) return null;\r\n  if (num == 0) return [];\r\n\r\n  var result = [];\r\n  var power = x;\r\n  while (true) {\r\n    if (num & 1) {\r\n      result = add(result, power, base);\r\n    }\r\n    num = num >> 1;\r\n    if (num === 0) break;\r\n    power = add(power, power, base);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction parseToDigitsArray(str, base) {\r\n  var digits = str.split(\"\");\r\n  var ary = [];\r\n  for (var i = digits.length - 1; i >= 0; i--) {\r\n    var n = parseInt(digits[i], base);\r\n    if (isNaN(n)) return null;\r\n    ary.push(n);\r\n  }\r\n  return ary;\r\n}\r\n\r\nfunction convertBase(str, fromBase, toBase) {\r\n  var digits = parseToDigitsArray(str, fromBase);\r\n  if (digits === null) return null;\r\n\r\n  var outArray = [];\r\n  var power = [1];\r\n  for (var i = 0; i < digits.length; i++) {\r\n    // invariant: at this point, fromBase^i = power\r\n    if (digits[i]) {\r\n      outArray = add(\r\n        outArray,\r\n        multiplyByNumber(digits[i], power, toBase),\r\n        toBase\r\n      );\r\n    }\r\n    power = multiplyByNumber(fromBase, power, toBase);\r\n  }\r\n\r\n  var out = \"\";\r\n  for (var i = outArray.length - 1; i >= 0; i--) {\r\n    out += outArray[i].toString(toBase);\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function hexToDec(hexStr) {\r\n  if (hexStr.substring(0, 2) === \"0x\") hexStr = hexStr.substring(2);\r\n  hexStr = hexStr.toLowerCase();\r\n  return convertBase(hexStr, 16, 10);\r\n}\r\n","import {hexToDec} from './hex2dec';\r\n\r\n\r\nexport class FlakeId {\r\n  /**\r\n   * Constructor for the class.\r\n   *\r\n   * @param {Object} options - The options object for the constructor.\r\n   * @param {number} options.mid - The mid value for the constructor. Default is 1.\r\n   * @param {number} options.timeOffset - The time offset value for the constructor. Default is 0.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n    this.seq = 0;\r\n    this.mid = (options.mid || 1) % 1023;\r\n    this.timeOffset = options.timeOffset || 0;\r\n    this.lastTime = 0;\r\n  }\r\n  /**\r\n   * Generates a unique identifier based on the current time, sequence number, and machine ID.\r\n   *\r\n   * @return {string} The generated unique identifier.\r\n   */\r\n  gen() {\r\n    let time = Date.now();\r\n\r\n    //get the sequence number\r\n    if (this.lastTime == time) {\r\n      this.seq++;\r\n\r\n      if (this.seq > 4095) {\r\n        this.seq = 0;\r\n\r\n        //make system wait till time is been shifted by one millisecond\r\n        while (Date.now() <= time) {}\r\n\r\n        // update time to next millisecond time\r\n        time = Date.now();\r\n      }\r\n    } else {\r\n      this.seq = 0;\r\n    }\r\n\r\n    this.lastTime = time;\r\n\r\n    const bTime = (time - this.timeOffset).toString(2)\r\n\r\n    let bSeq = this.seq.toString(2),\r\n      bMid = this.mid.toString(2);\r\n\r\n    //create sequence binary bit\r\n    while (bSeq.length < 12) bSeq = \"0\" + bSeq;\r\n\r\n    while (bMid.length < 10) bMid = \"0\" + bMid;\r\n\r\n    const bid = bTime + bMid + bSeq;\r\n    let id = \"\";\r\n\r\n    for (let i = bid.length; i > 0; i -= 4) {\r\n      id = parseInt(bid.substring(i - 4, i), 2).toString(16) + id;\r\n    }\r\n\r\n    return hexToDec(id);\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}