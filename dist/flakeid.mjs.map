{"version":3,"sources":["../src/hex2dec.js","../src/flakeid.js"],"sourcesContent":["/**\r\n * A function for converting hex <-> dec w/o loss of precision.\r\n * By Dan Vanderkam http://www.danvk.org/hex2dec.html\r\n */\r\n\r\n// Adds two arrays for the given base (10 or 16), returning the result.\r\n// This turns out to be the only \"primitive\" operation we need.\r\nfunction add(x, y, base) {\r\n  var z = [];\r\n  var n = Math.max(x.length, y.length);\r\n  var carry = 0;\r\n  var i = 0;\r\n  while (i < n || carry) {\r\n    var xi = i < x.length ? x[i] : 0;\r\n    var yi = i < y.length ? y[i] : 0;\r\n    var zi = carry + xi + yi;\r\n    z.push(zi % base);\r\n    carry = Math.floor(zi / base);\r\n    i++;\r\n  }\r\n  return z;\r\n}\r\n\r\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\r\n// JavaScript number. base is the number base of the array x.\r\nfunction multiplyByNumber(num, x, base) {\r\n  if (num < 0) return null;\r\n  if (num == 0) return [];\r\n\r\n  var result = [];\r\n  var power = x;\r\n  while (true) {\r\n    if (num & 1) {\r\n      result = add(result, power, base);\r\n    }\r\n    num = num >> 1;\r\n    if (num === 0) break;\r\n    power = add(power, power, base);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction parseToDigitsArray(str, base) {\r\n  var digits = str.split(\"\");\r\n  var ary = [];\r\n  for (var i = digits.length - 1; i >= 0; i--) {\r\n    var n = parseInt(digits[i], base);\r\n    if (isNaN(n)) return null;\r\n    ary.push(n);\r\n  }\r\n  return ary;\r\n}\r\n\r\nfunction convertBase(str, fromBase, toBase) {\r\n  var digits = parseToDigitsArray(str, fromBase);\r\n  if (digits === null) return null;\r\n\r\n  var outArray = [];\r\n  var power = [1];\r\n  for (var i = 0; i < digits.length; i++) {\r\n    // invariant: at this point, fromBase^i = power\r\n    if (digits[i]) {\r\n      outArray = add(\r\n        outArray,\r\n        multiplyByNumber(digits[i], power, toBase),\r\n        toBase\r\n      );\r\n    }\r\n    power = multiplyByNumber(fromBase, power, toBase);\r\n  }\r\n\r\n  var out = \"\";\r\n  for (var i = outArray.length - 1; i >= 0; i--) {\r\n    out += outArray[i].toString(toBase);\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function hexToDec(hexStr) {\r\n  if (hexStr.substring(0, 2) === \"0x\") hexStr = hexStr.substring(2);\r\n  hexStr = hexStr.toLowerCase();\r\n  return convertBase(hexStr, 16, 10);\r\n}\r\n","import {hexToDec} from './hex2dec';\r\n\r\nexport class FlakeId {\r\n  /**\r\n   * Constructor for the class.\r\n   *\r\n   * @param {Object} options - The options object for the constructor.\r\n   * @param {number} options.mid - The mid value for the constructor. Default is 1.\r\n   * @param {number} options.timeOffset - The time offset value for the constructor. Default is 0.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n    this.seq = 0;\r\n    this.mid = (options.mid || 1) % 1023;\r\n    this.timeOffset = options.timeOffset || 0;\r\n    this.lastTime = 0;\r\n  }\r\n  /**\r\n   * Generates a unique identifier based on the current time, sequence number, and machine ID.\r\n   *\r\n   * @return {string} The generated unique identifier.\r\n   */\r\n  gen() {\r\n    let time = Date.now();\r\n\r\n    //get the sequence number\r\n    if (this.lastTime == time) {\r\n      this.seq++;\r\n\r\n      if (this.seq > 4095) {\r\n        this.seq = 0;\r\n\r\n        //make system wait till time is been shifted by one millisecond\r\n        while (Date.now() <= time) {}\r\n\r\n        // update time to next millisecond time\r\n        time = Date.now();\r\n      }\r\n    } else {\r\n      this.seq = 0;\r\n    }\r\n\r\n    this.lastTime = time;\r\n\r\n    const bTime = (time - this.timeOffset).toString(2)\r\n\r\n    let bSeq = this.seq.toString(2),\r\n      bMid = this.mid.toString(2);\r\n\r\n    //create sequence binary bit\r\n    while (bSeq.length < 12) bSeq = \"0\" + bSeq;\r\n\r\n    while (bMid.length < 10) bMid = \"0\" + bMid;\r\n\r\n    const bid = bTime + bMid + bSeq;\r\n    let id = \"\";\r\n\r\n    for (let i = bid.length; i > 0; i -= 4) {\r\n      id = parseInt(bid.substring(i - 4, i), 2).toString(16) + id;\r\n    }\r\n\r\n    return hexToDec(id);\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}